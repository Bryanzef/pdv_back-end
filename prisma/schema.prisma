// Configuração do datasource para PostgreSQL
// e geração automática de client Prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  nome      String
  email     String   @unique
  senha     String
  perfil    String
  ativo     Boolean  @default(true)
  vendas    Sale[]   @relation("VendedorVendas")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações de auditoria
  logsComoAutor AuditLog[] @relation("UsuarioAutor")
  logsComoAlvo  AuditLog[] @relation("UsuarioAlvo")
}

model Product {
  id        String     @id @default(uuid())
  nome      String
  preco     Float
  categoria String
  estoque   Int
  ativo     Boolean    @default(true)
  saleItems SaleItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tipo      String // 'peso' ou 'unidade'
}

model Sale {
  id              String     @id @default(uuid())
  total           Decimal    @db.Decimal(12, 2)
  valorPago       Decimal    @db.Decimal(12, 2)
  troco           Decimal?   @db.Decimal(12, 2)
  vendedorId      String?
  vendedor        User?      @relation("VendedorVendas", fields: [vendedorId], references: [id], onDelete: SetNull)
  metodoPagamento String
  saleItems       SaleItem[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model SaleItem {
  id         String   @id @default(uuid())
  saleId     String
  productId  String? // agora opcional
  nome       String
  preco      Decimal  @db.Decimal(12, 2)
  quantidade Int
  sale       Sale     @relation(fields: [saleId], references: [id])
  product    Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
}

model AuditLog {
  id             String   @id @default(uuid())
  usuarioAutorId String?
  usuarioAlvoId  String?
  acao           String
  dataHora       DateTime @default(now())
  usuarioAutor   User?    @relation("UsuarioAutor", fields: [usuarioAutorId], references: [id], onDelete: SetNull)
  usuarioAlvo    User?    @relation("UsuarioAlvo", fields: [usuarioAlvoId], references: [id], onDelete: SetNull)
}
